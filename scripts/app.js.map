{"version":3,"file":"public/scripts/app.js","sources":["app/scripts/application.coffee","app/scripts/controllers/base/controller.coffee","app/scripts/controllers/experiment-controller.coffee","app/scripts/initialize.coffee","app/scripts/libs/support.coffee","app/scripts/libs/utils.coffee","app/scripts/libs/view-helper.coffee","app/scripts/models/experiment.coffee","app/scripts/models/experiments.coffee","app/scripts/routes.coffee","app/scripts/views/application-view.coffee","app/scripts/views/base/collection-view.coffee","app/scripts/views/base/view.coffee","app/scripts/views/experiment-row-view.coffee","app/scripts/views/experiment/debt_experiment.coffee","app/scripts/views/experiment/gravatar_experiment.coffee","app/scripts/views/experiment/hello_experiment.coffee","app/scripts/views/experiment/pos_experiment.coffee","app/scripts/views/experiment/simple_box_experiment.coffee","app/scripts/views/site-view.coffee","app/templates/experiment_row.hbs","app/templates/experiments/css-transition-fun.hbs","app/templates/experiments/debt.hbs","app/templates/experiments/gravatar.hbs","app/templates/experiments/hello_world.hbs","app/templates/experiments/pos.hbs","app/templates/experiments/simple_box.hbs","app/templates/layouts/main.hbs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AALA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;;A,CCAA;;AACA;AACA;AACA;AACA;AAJA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnhpHA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;;A","sourcesContent":["routes = require 'scripts/routes'\n\n# The application object.\n# Choose a meaningful name for your application.\nmodule.exports = class Application extends Chaplin.Application\n  title: 'Experiments'\n\n  initDispatcher: (options) ->\n    options.controllerPath = 'scripts/controllers/'\n    options.controllerSuffix =  '-controller'\n    @dispatcher = new Chaplin.Dispatcher options","SiteView = require 'scripts/views/site-view'\n\nmodule.exports = class Controller extends Chaplin.Controller\n  # Place your application-specific controller features here\n  beforeAction: ->\n    @compose 'site', SiteView","\nController = require 'scripts/controllers/base/controller'\nExperiment = require 'scripts/models/experiment'\nExperiments = require 'scripts/models/experiments'\nApplicationView = require 'scripts/views/application-view'\n\nmodule.exports = class ExperimentController extends Controller\n  setupExperiments: =>\n    # TODO cache the call?\n    @experimentList = new Experiments()\n    @experimentList.fetch\n        async: false\n        ifModified:false\n        cache: false\n    @experimentList\n\n  index: =>\n    # Clean up a bit\n    experimentList = @setupExperiments()\n    applicationView = new ApplicationView\n      collection: experimentList\n      region: 'main'\n    applicationView\n\n  show: (params) =>\n    experimentId = params.id\n    experimentList = @setupExperiments()\n    experiment = experimentList.get(experimentId)\n    experimentSource = \"scripts/views/experiment/#{experiment.get('source')}\"\n    \n    ExperimentView = require experimentSource\n    experimentView = new ExperimentView\n      collection: experimentList\n      model: experiment\n      region: 'experiment'","Application = require 'scripts/application'\nroutes = require 'scripts/routes'\n\n# Initialize the application on DOM ready event.\n$ ->\n  new Application   \n  \troutes: routes, \n    pushState: true\n\n  window.base_path = window.location.pathname","support = utils.beget Chaplin.support\nmodule.exports = support","\nutils = Chaplin.utils.beget Chaplin.utils\n\nObject.seal? utils\n\nmodule.exports = utils","utils = require 'scripts/libs/utils'\n\n\n# Application-specific Handlebars helpers\n# ---------------------------------------\n\n# Get Chaplin-declared named routes. {{#url \"like\" \"105\"}}{{/url}}\nHandlebars.registerHelper 'url', (routeName, params..., options) ->\n  Chaplin.helpers.reverse routeName, params","\n# Individual experiment\nmodule.exports = class Experiment extends Chaplin.Model\n  # Nothing to see here","\nExperiment = require 'scripts/models/experiment'\n\n# Gets a list of experiments\nmodule.exports = class Experiments extends Chaplin.Collection\n  model: Experiment\n\n  path: (method) ->\n    if !window.base_path || window.base_path == '/'\n      \"/experiments.json\"\n    else\n      \"#{window.base_path}/experiments.json\"\n\n  url: (method) ->\n    @path(method)","# The routes for the application. This module returns a function.\n# `match` is match method of the Router\n\nmodule.exports = (match) ->\n  match '', 'experiment#index'\n  match 'experiments/:id',  'experiment#show'","ExperimentRowView = require 'scripts/views/experiment-row-view'\n\nmodule.exports = class ApplicationView extends Chaplin.CollectionView\n\n  className: 'experiment-list'\n  tagName: 'ul'\n  itemView: ExperimentRowView","View = require 'scripts/views/base/view'\nmodule.exports = class CollectionView extends Chaplin.CollectionView\n  # This class doesn’t inherit from the application-specific View class,\n  # so we need to borrow the method from the View prototype:\n  getTemplateFunction: View::getTemplateFunction","require 'scripts/libs/view-helper'  \n\nmodule.exports = class View extends Chaplin.View\n  getTemplateFunction: ->\n    # Template compilation\n    # --------------------\n    # This demo uses Handlebars templates to render views.\n    # The template is loaded with Require.JS and stored as string on\n    # the view prototype. On rendering, it is compiled on the\n    # client-side. The compiled template function replaces the string\n    # on the view prototype.\n    #\n    # In the end you might want to precompile the templates to JavaScript\n    # functions on the server-side and just load the JavaScript code.\n    # Several precompilers create a global JST hash which stores the\n    # template functions. You can get the function by the template name:\n    #\n    # templateFunc = JST[@templateName]\n\n    template = @template\n\n    if typeof template is 'string'\n      # Compile the template string to a function and save it\n      # on the prototype. This is a workaround since an instance\n      # shouldn’t change its prototype normally.\n      templateFunc = Handlebars.compile template\n      @constructor::template = templateFunc\n    else\n      templateFunc = template\n    templateFunc\n\n\n  render: ->\n    returnValue = super\n    @afterRender?()\n    returnValue\n\n  close: (e) ->\n    @remove()\n    Backbone.history.navigate('/#',true)","# **Debt is Evil** is a simple experiment to illustrate debt payoff calculations based\n# on a per month payment, percent and a total. It responds with the length of time it will take to\n# pay off the amount\nView = require 'scripts/views/base/view'\ntemplate = require 'templates/experiment_row'\n\nmodule.exports = class ExperimentRowView extends View\n  \n  className: 'experiment-row'\n  tagName: 'li'\n\n  # Save the template string in a prototype property.\n  # This is overwritten with the compiled template function.\n  # In the end you might want to used precompiled templates.\n  template: template\n\n  getTemplateData: =>\n    { id: @model.id, name: @model.get('name'), description: @model.get('description') }","# **Debt is Evil** is a simple experiment to illustrate debt payoff calculations based\n# on a per month payment, percent and a total. It responds with the length of time it will take to\n# pay off the amount\nView = require 'scripts/views/base/view'\ntemplate = require 'templates/experiments/debt'\n\n\nmodule.exports = class DebtExperimentView extends View\n\n  events:\n    'click [data-action=\"close\"]'     : 'close'\n    'click [data-action=\"calculate\"]' : 'calculate'\n\n  autoRender: true\n  template: template\n  template = null\n  \n  # just calculates interest\n  interest: (balance, percent) ->\n    monthlyPay = balance * percent\n    (monthlyPay / 12)\n\n\n  # figures out how long based on calling @interest to calculate\n  # compounding interest, monthly payment, etc...\n  how_long: (balance, percent, payment) ->\n    percentOnDebt = percent * 0.01\n    debtBalance = balance\n    count = 0\n    totalInterest = 0\n    # Loop through until the balance is 0\n    # creating a summation of the period count\n    while (debtBalance > 0)\n      # TODO create graph using d3, month to month view\n      # Calculate current interest via a compound schedule\n      interest = @interest(debtBalance, percentOnDebt)\n      # total interest paid\n      totalInterest = (interest + totalInterest)\n      debtBalance = (debtBalance + interest)\n      debtBalance = (debtBalance - payment)\n      count = count + 1\n\n    # Round the total interest to only have 2 decimal places\n    {\n      interest: (Math.round(totalInterest*100)/100),\n      count: count\n    }\n\n  # Main method to calculate debt\n  calculate: (e) ->\n    # #. Get the per month, percent and the total from the inputs\n    # The values are passed through parseInt so the interpreter will not\n    # try any funny business with the numbers and treat them like ints\n    perMonth = parseInt(@$('[name=\"per_month\"]').val(),10)\n    percent = parseInt(@$('[name=\"percent\"]').val(),10)\n    currentTotal = parseInt(@$('[name=\"current_total\"]').val(),10)\n    # #. Update the result div with details\n    if perMonth && percent && currentTotal\n      result = @how_long(currentTotal, percent, perMonth)\n      resultOutput = \"<div class=\\\"months\\\" >Months: #{result.count}</div><div class=\\\"interest\\\" >Total Interest: #{result.interest}</div>\"\n      @$('[data-elem=\"results\"]').html(resultOutput)","View = require 'scripts/views/base/view'\ntemplate = require 'templates/experiments/gravatar'\n\n# **GravatarExperiment** is a simple experiment to display the gravatar based on an email\n# to test out a way to make a profile registration\nmodule.exports = class GravatarExperimentView extends View\n\n  events:\n    'click [data-action=\"close\"]' : 'close'\n    'change [data-elem=\"email\"]'  : 'changeAvatar'\n\n  autoRender: true\n    \n  template: template\n  template = null\n\n  changeAvatar: (e) =>\n    if (emailAddress = $(e.currentTarget).val())\n      imageUrl = \"http://www.gravatar.com/avatar/#{md5(emailAddress)}.jpg?s=80&d=https://d1vk1po2s93fx0.cloudfront.net/assets/info/avatar-empty-f47c5c13282838f4afa0d2dc90acb42a.png\"\n      avatarEl = @$('#avatar')\n      avatarEl.empty()\n      avatarEl.append \"<img src=\\\"#{imageUrl}\\\" />\"","View = require 'scripts/views/base/view'\ntemplate = require 'templates/experiments/hello_world'\n\n# **HelloExperiment** is a simple experiment just to get a mini experimental site working with lab like projects.\n# Using [Docco](http://jashkenas.github.com/docco/) to generate the documentation.\n#   docco src/*.coffee\nmodule.exports = class HelloExperimentView extends View\n\n  events:\n    'click [data-action=\"close\"]' : 'close'\n\n  autoRender: true\n    \n  template: template\n  template = null\n\n  getTemplateData: ->\n    {\n      name: 'world'\n    }\n\n  afterRender: =>\n    container = @$('[data-elem=\"sketch-on-me\"]')[0]\n    @ctx = Sketch.create\n      container: container\n      autoclear: false\n      autostart: false\n    @ctx.width = 800\n    @ctx.height = 250\n    @ctx.draw = =>\n        @ctx.beginPath()\n        @ctx.arc( random( @ctx.width ), random( @ctx.height ), 3, 0, TWO_PI )\n        @ctx.fillStyle = '#776d6b'\n        @ctx.fill()\n    @ctx.start()\n\n  remove: ->\n    super\n    @ctx.stop()\n    @ctx.clear()","View = require 'scripts/views/base/view'\ntemplate = require 'templates/experiments/pos'\n\n# **Parts of Speech parsing** is an experiment involving parts of speech\nmodule.exports = class PosExperimentView extends View\n\n  events:\n    'click [data-action=\"analyze\"]'     : 'analyze'\n    'click [data-action=\"close\"]'       : 'close'\n\n  autoRender: true\n\n  template: template\n  template = null\n\n  questionReponses:\n    eat: [\n      {\n        text: (noun) -> \"Sometimes I eat #{noun}\",\n        emotion: 1\n      },\n      {\n        text: (noun) -> \"Eating #{noun} is not very healthy\",\n        emotion: 1\n      }\n    ]\n    read: [\n      {\n      text: (noun) -> \"Well I'm reading your question right now\",\n      emotion: 1\n      },\n      {\n      text: (noun) -> \"I read parts of speech mostly\",\n      emotion: 1\n      }\n    ]\n\n  taskReponses:\n    call: [\n      {\n        text: (noun) -> \"Why do you want to call #{noun}?\",\n        emotion: 1\n      },\n      {\n        text: (noun) -> \"You still like #{noun}?\",\n        emotion: 1\n      }\n    ]\n    make: [\n      {\n      text: (noun) -> \"Do you really think I can make #{noun}?\",\n      emotion: 1\n      },\n      {\n      text: (noun) -> \"If I could make #{noun} I wouldn't be here\",\n      emotion: 1\n      },\n      {\n      text: (noun) -> \"I can only do so much. You could make your own #{noun}\",\n      emotion: 1\n      }\n    ]\n\n  # Grabs the first verb\n  firstVerb: (taggedWords) ->\n    for taggedWord in taggedWords\n      word = taggedWord[0]\n      tag = taggedWord[1]\n      if _.include(['PP','VB', 'VBN'], tag)\n        return word\n\n  # Grabs the first set of nouns in sequence\n  firstNouns: (taggedWords) ->\n    nouns = \"\"\n    for taggedWord in taggedWords\n      word = taggedWord[0]\n      tag = taggedWord[1]\n      if _.include(['NN','NNS', 'NNP'], tag)\n        nouns += \" #{word}\"\n      else if nouns.length > 1\n        return nouns\n    nouns\n\n  # Gets a random value from a list\n  randomListItem: (list) ->\n    max = list.length\n    idx = Math.floor(Math.random() * max)\n    list[idx]\n\n  questionResponse: (taggedWords) ->\n    verb = @firstVerb(taggedWords)\n    nouns = @firstNouns(taggedWords)\n    if verb && (responses = @questionReponses[verb.toLowerCase()]) && (response = @randomListItem(responses))\n      response.text(nouns)\n    else\n      \"Looks like you might be asking a question about #{nouns}?\"\n\n  taskResponse: (taggedWords) ->\n    verb = @firstVerb(taggedWords)\n    nouns = @firstNouns(taggedWords)\n    if verb && (responses = @taskReponses[verb.toLowerCase()]) && (response = @randomListItem(responses))\n        response.text(nouns)\n    else\n      \"Do you need to do something related to #{nouns}?\"\n\n  # Main method to analyze text\n  analyze: (e) ->\n    # Get the text from the description field\n    textValue = @$('[name=\"description\"]').val()\n    # #. Update the result div with analysis\n    if textValue\n      words = new Lexer().lex(textValue)\n      taggedWords = new POSTagger().tag(words)\n      resultOutput = \"\"\n      firstWord = taggedWords[0]\n      firstTag = firstWord[1]\n      if _.include(['WRB','WP','WDT', 'VBP'], firstTag)\n        resultOutput += \"<div class=\\\"type\\\" >#{@questionResponse(taggedWords)}<br /></div>\"\n      else if _.include(['PP','VB', 'VBN'], firstTag)\n        resultOutput += \"<div class=\\\"type\\\" >#{@taskResponse(taggedWords)}<br /></div>\"\n      else if 'PRP' == firstTag  # Also need PDT for all, both, etc... / analyze all\n        resultOutput += \"<div class=\\\"type\\\" >Need to communicate someone for this? <br /></div>\"\n      # TODO analyze the contents based on combination of tags to determine actions\n      # TODO analyze verb and determine the subject after that\n      # Also determine content based on verb / preposition and Proper Noun\n      for taggedWord in taggedWords\n        word = taggedWord[0]\n        tag = taggedWord[1]\n        resultOutput += \"<div class=\\\"pos-item\\\" >Word: #{word}, TAG: #{tag}</div>\"\n      @$('[data-elem=\"results\"]').html(resultOutput)","View = require 'scripts/views/base/view'\ntemplate = require 'templates/experiments/simple_box'\n\n# **Box Physics Experiment** is a simple experiment just to get used to threejs and physijs.\nmodule.exports = class SimpleBoxExperimentView extends View\n\n  events:\n    'click [data-action=\"close\"]' : 'close'\n    'click [data-elem=\"sketch-on-me\"]': 'addShape'\n\n  autoRender: true\n\n  template: template\n  template = null\n\n  initialize: ->\n    super\n    thirdPartyRoot = window.base_path || ''\n    Physijs.scripts.worker = \"#{thirdPartyRoot}/third-party/physijs_worker.js\"\n    Physijs.scripts.ammo = \"#{thirdPartyRoot}/third-party/ammo.js\"\n\n  addLight: ->\n    light = new THREE.DirectionalLight( 0xFFFFFF )\n    light.position.set( 20, 40, -15 )\n    light.target.position.copy( @scene.position )\n    light.castShadow = true\n    light.shadowCameraLeft = -60\n    light.shadowCameraTop = -60\n    light.shadowCameraRight = 60\n    light.shadowCameraBottom = 60\n    light.shadowCameraNear = 20\n    light.shadowCameraFar = 200\n    light.shadowBias = -0.0001\n    light.shadowMapWidth = light.shadowMapHeight = 2048\n    light.shadowDarkness = 0.7\n    @scene.add( light )\n\n  initScene: ->\n    container = @$('[data-elem=\"sketch-on-me\"]')[0]\n    width = 650\n    height = 450\n    @renderer = new THREE.WebGLRenderer\n      antialias: true\n    @renderer.setSize( width, height )\n    @renderer.shadowMapEnabled = true\n    @renderer.shadowMapSoft = true\n    container.appendChild( @renderer.domElement )\n    @scene = new Physijs.Scene()\n    @scene.setGravity(new THREE.Vector3( 0, -30, 0 ))\n    @scene.addEventListener(\n      'update',\n      =>\n        @scene.simulate( undefined, 2 )\n    )\n    @camera = new THREE.PerspectiveCamera(\n      35,\n      width / height,\n      1,\n      1000\n    )\n    @camera.position.set( 50, 10, 50 )\n    @camera.lookAt( @scene.position )\n    @scene.add( @camera )\n    # Box\n    @box = new Physijs.BoxMesh(\n      new THREE.CubeGeometry( 50, 2, 50 ),\n      new THREE.MeshBasicMaterial({ color: 0x888888 }),\n      0 # mass\n    )\n    @box.receiveShadow = true\n    @scene.add( @box )\n    @addLight()\n    requestAnimationFrame( @renderScene )\n\n\n  renderScene: =>\n    @scene.simulate() # run physics\n    @renderer.render( @scene, @camera) # render the scene\n    requestAnimationFrame( @renderScene )\n\n  addShape: =>\n    material = Physijs.createMaterial(\n      new THREE.MeshLambertMaterial({ opacity: 1, transparent: true }),\n      0.6, # Friction\n      0.3 # restitution\n    )\n    shape = new Physijs.BoxMesh(new THREE.CubeGeometry( 3, 3, 3 ), material)\n    shape.material.color.setRGB( Math.random() * 100 / 100, Math.random() * 100 / 100, Math.random() * 100 / 100 )\n    shape.castShadow = true\n    shape.receiveShadow = true\n    shape.position.set(\n      Math.random() * 30 - 15,\n      20,\n      Math.random() * 30 - 15\n    )\n    shape.rotation.set(\n      Math.random() * Math.PI,\n      Math.random() * Math.PI,\n      Math.random() * Math.PI\n    )\n    @scene.add( shape )\n\n\n\n  afterRender: =>\n    @initScene()","View = require 'scripts/views/base/view'\ntemplate = require 'templates/layouts/main'\n\nmodule.exports = class SiteView extends View\n  container: '#main'\n  id: 'site-container'\n  regions:\n    main: '#content'\n    experiment: '#experiment'\n  template: template\n  template = null","<a href=\"/experiments/{{id}}\">{{name}}</a> {{description}}","<div class=\"modal experiment-modal\">\n<div class=\"modal-header\"><h3>Css Transition fun</h3>\n  <a class=\"experiment-close\" data-action=\"close\">x</a>\n</div>\n<div class=\"modal-body\"><p>\n   Expanding Css transition box\n   <input type=\"text\" class=\"expanding-input\" />\n</p></div>\n<div class=\"modal-footer\"><a data-action=\"docs\" href=\"docs/css-transition-fun.html\" data-bypass=\"true\">Documentation</a></div>\n</div>\n<div class=\"modal-backdrop experiment-backdrop\"></div>\n</div>\n","<!-- TODO make snippets for handlebars? -->\n<div class=\"modal experiment-modal\">\n    <div class=\"modal-header\"><h3>Debt is evil</h3>\n        <a class=\"experiment-close\" data-action=\"close\">x</a>\n    </div>\n    <div class=\"modal-body\">\n        <div class=\"calculator\">\n        <p>\n        <label>Per month:</label><input type=\"text\" name=\"per_month\" />\n        </p>\n        <p>\n        <label>Percentage:</label><input type=\"text\" name=\"percent\" />%\n        </p>\n        <p>\n        <label>Current Balance:</label><input type=\"text\" name=\"current_total\" />\n        </p>\n        <p>\n          <button data-action=\"calculate\" >Calculate</button>\n        </p>\n        </div>\n        <div class=\"calc-results\" data-elem=\"results\"></div>\n    </div>\n    <div class=\"modal-footer\"><a data-action=\"docs\" href=\"docs/debt_experiment.html\" data-bypass=\"true\">Documentation</a></div>\n</div>\n<div class=\"modal-backdrop experiment-backdrop\"></div>\n</div>\n","<div class=\"modal experiment-modal\">\n<div class=\"modal-header\"><h3>Gravatar Experiment</h3>\n  <a class=\"experiment-close\" data-action=\"close\">x</a>\n</div>\n<div class=\"modal-body\"><p>\n    <p>\n    Email address: <input type=\"email\" data-elem=\"email\" />\n    </p>\n    <div id=\"avatar\">\n    </div>\n</p></div>\n<div class=\"modal-footer\"><a data-action=\"docs\" href=\"docs/gravatar_experiment.html\" data-bypass=\"true\">Documentation</a></div>\n</div>\n<div class=\"modal-backdrop experiment-backdrop\"></div>\n</div>\n","<div class=\"modal experiment-modal\">\n<div class=\"modal-header\"><h3>Hello {{name}}!</h3>\n  <a class=\"experiment-close\" data-action=\"close\">x</a>\n</div>\n<div class=\"modal-body\"><p>\n    This is the first experiment to work out the structure of the loading and starting of experiments\n    <div data-elem=\"sketch-on-me\">\n\n    </div>\n</p></div>\n<div class=\"modal-footer\"><a data-action=\"docs\" href=\"docs/hello_experiment.html\" data-bypass=\"true\">Documentation</a></div>\n</div>\n<div class=\"modal-backdrop experiment-backdrop\"></div>\n</div>\n","<!-- TODO make snippets for handlebars? -->\n<div class=\"modal experiment-modal\">\n    <div class=\"modal-header\"><h3>Parts of Speech Analysis</h3>\n        <a class=\"experiment-close\" data-action=\"close\">x</a>\n    </div>\n    <div class=\"modal-body\">\n        <div class=\"calculator\">\n            <p>\n                <label>Enter some text:</label><textarea name=\"description\" ></textarea>\n            </p>\n            <p>\n                <button data-action=\"analyze\" >Analyze</button>\n            </p>\n        </div>\n        <div class=\"calc-results\" data-elem=\"results\"></div>\n    </div>\n    <div class=\"modal-footer\"><a data-action=\"docs\" href=\"docs/pos_experiment.html\" data-bypass=\"true\">Documentation</a></div>\n</div>\n<div class=\"modal-backdrop experiment-backdrop\"></div>\n</div>\n","<div class=\"modal experiment-modal\">\n    <div class=\"modal-header\"><h3>Simple Box Physics!</h3>\n        <a class=\"experiment-close\" data-action=\"close\">x</a>\n    </div>\n    <div class=\"modal-body\">\n        <div data-elem=\"sketch-on-me\">\n        </div>\n    </div>\n    <div class=\"modal-footer\"><a data-action=\"docs\" href=\"docs/simple_box_experiment.html\" data-bypass=\"true\">Documentation</a></div>\n</div>\n<div class=\"modal-backdrop experiment-backdrop\"></div>\n</div>\n","<section id=\"content\" class=\"content\"></section>\n<aside id=\"experiment\" class=\"secondary\"></aside>\n"]}